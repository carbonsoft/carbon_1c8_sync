Перем тСчетаДляВыгрузки;

Перем КолЗапСинхр;
Перем тСинхронизации; 

Перем мВалютаРегламентированногоУчета;

// Магия для urlencode

Функция КодСимволаASCII(Символ) 
   КодUNICODE = КодСимвола(Символ); 
   Если ((КодUNICODE > 1039) И (КодUNICODE < 1104)) Тогда 
       Возврат (КодUNICODE - 848); 
   ИначеЕсли КодUNICODE = 8470 Тогда 
       Возврат 185; 
   ИначеЕсли КодUNICODE = 1105 Тогда 
       Возврат 184; 
   ИначеЕсли КодUNICODE = 1025 Тогда 
       Возврат 168; 
   Иначе 
       Возврат КодUNICODE; 
   КонецЕсли; 
КонецФункции


Функция URLEncode( value )

    table = "%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F%10%11%12%13%14" +
            "%15%16%17%18%19%1A%1B%1C%1D%1E%1F%20%21%22%23%24%25%26%27%28" +
            "%29%2A%2B%2C%2D%2E%2F%30%31%32%33%34%35%36%37%38%39%3A%3B%3C" +
            "%3D%3E%3F%40%41%42%43%44%45%46%47%48%49%4A%4B%4C%4D%4E%4F%50" +
            "%51%52%53%54%55%56%57%58%59%5A%5B%5C%5D%5E%5F%60%61%62%63%64" +
            "%65%66%67%68%69%6A%6B%6C%6D%6E%6F%70%71%72%73%74%75%76%77%78" +
            "%79%7A%7B%7C%7D%7E%7F%80%81%82%83%84%85%86%87%88%89%8A%8B%8C" +
            "%8D%8E%8F%90%91%92%93%94%95%96%97%98%99%9A%9B%9C%9D%9E%9F%A0" +
            "%A1%A2%A3%A4%A5%A6%A7%A8%A9%AA%AB%AC%AD%AE%AF%B0%B1%B2%B3%B4" +
            "%B5%B6%B7%B8%B9%BA%BB%BC%BD%BE%BF%C0%C1%C2%C3%C4%C5%C6%C7%C8" +
            "%C9%CA%CB%CC%CD%CE%CF%D0%D1%D2%D3%D4%D5%D6%D7%D8%D9%DA%DB%DC" +
            "%DD%DE%DF%E0%E1%E2%E3%E4%E5%E6%E7%E8%E9%EA%EB%EC%ED%EE%EF%F0" +
            "%F1%F2%F3%F4%F5%F6%F7%F8%F9%FA%FB%FC%FD%FE%FF";
    
    result = "";        
            
    length = СтрДлина( value );        
    
    Для i = 1 По  length Цикл        
        symbol = Сред( value, i, 1 );        
       //code = КодСимвола( symbol );    
        code = КодСимволаASCII( symbol );
        result = result + Сред( table, code*3 + 1, 3 );        
    КонецЦикла;
    
    
    
    Возврат result;
КонецФункции

// Конец магии





///////////////////////////////////////////////////////////Carbonsoft
Процедура ПриОткрытии()
	Инфо = Новый СистемнаяИнформация;
	Если Лев(Инфо.ВерсияПриложения,3)<> "8.3" Тогда
		Сообщить("Не верная версия платформы, требуется 8.3");
	КонецЕсли;
	Если Лев(Метаданные.Версия,3)<> "3.0" Тогда
		Сообщить("Не верная версия конфигурации Бухгалтерия предприятия, требуется 3.0");
	КонецЕсли;
	тСчетаДляВыгрузки = Новый СписокЗначений;
	тСчетаДляВыгрузки.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);
	тСчетаДляВыгрузки.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);

	СчетРасчетов	= ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	СчетАвансов		= ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
	
	СтавкаНДС		= Перечисления.СтавкиНДС.НДС18;
	мВалютаРегламентированногоУчета	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	
	тСинхронизации		= Новый ТаблицаЗначений;
	тСинхронизации.Колонки.Добавить("code_asr");
	тСинхронизации.Колонки.Добавить("code_1c");
	КолЗапСинхр			= 40;
	port = 8082;
	
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачДата, ?(КонДата='0001-01-01', КонДата, КонецДня(КонДата)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		НачДата = НастройкаПериода.ПолучитьДатуНачала();
		КонДата = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры
	
Функция ПолучитьКоличествоЗаписей(xml_file,счСтрок,ТегНачала,ТегКонца,ТегОбьекта)
	Стр = "";
	Количество=0;
	НомерС=счСтрок;
	//Пока Найти(Стр,ТегНачала)=0 и Найти(Стр,ТегКонца)=0 Цикл
	//	Стр = СокрЛП(xml_file.ПолучитьСтроку(НомерС));
	//	НомерС	= НомерС + 1;
	//КонецЦикла;
    Пока Найти(Стр,ТегКонца)=0 Цикл
		Стр = СокрЛП(xml_file.ПолучитьСтроку(НомерС));
		НомерС	= НомерС + 1;
		Если Найти(Стр,ТегОбьекта)>0 Тогда
			Количество=Количество+1;
		КонецЕсли
	КонецЦикла;
	Возврат Количество;
КонецФункции


//***********************************************************************************************************                               
Процедура ПровестиСинхронизацию(suid,Тип)
	
	Если тСинхронизации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИмяФайла_подтв	= КаталогВременныхФайлов() + "\tmp_import_sync.xml";
	счСтрок			= 1;
	
	Если Тип = 1 Тогда
//Синхронизация справочника контрагенты
		params	= "model=Abonents&method1=api_1c_manager.api_1c_sync_abonent"		
	ИначеЕсли Тип = 2 ИЛИ Тип = 3  Тогда
//Синхронизация ПКО
		params = "model=FinanceOperations&method1=api_1c_manager.api_1c_sync_fin_oper"
	КонецЕсли;

	Для Каждого СтрокаТЧ Из тСинхронизации Цикл
		params2 = "";
		Если Тип<>2 И Тип<>3 Тогда 
			params2 = params + "&arg1={"+Символ(34)+"pk"+Символ(34)+":"+Символ(34)+СтрЗаменить(СтрокаТЧ.code_asr,Символы.НПП,"")+Символ(34)+",";
			params2=params2+Символ(34)+"code1c"+Символ(34)+":"+Символ(34)+Формат(СтрокаТЧ.code_1c,"ЧГ=0")+Символ(34)+","+Символ(34)+"sync1c"+Символ(34)+":"+Символ(34)+Формат(1,"ЧГ=0")+Символ(34)+"}";
			data=ОтправитьRestЗапрос(ИмяФайла_подтв,params2);
		Иначе 
		    args=Новый Соответствие;
	 		args["pk"]=СтрЗаменить(СтрокаТЧ.code_asr,Символы.НПП,"");
	 		args["code1c"]=СтрокаТЧ.code_1c;
			params2 = params +"&arg1="+form_params_str(args);
			//params = params + "&method3=save&arg3={}";
			data=ОтправитьRestЗапрос(ИмяФайла_подтв,params2);
		КонецЕсли;
		
	КонецЦикла;
		
	тСинхронизации.Очистить();
	
КонецПроцедуры


//***********************************************************************************************************
Функция form_params_str(params)
	res="";
	/// Для Элемент.Значение убираем непечатаемые пробелы. Титусов
	Для Каждого Элемент из params Цикл 
        res=res+Символ(34)+Элемент.Ключ+Символ(34)+":"+Символ(34)+СтрЗаменить(Строка(Элемент.Значение), Символы.НПП,"")+Символ(34)+","	
	КонецЦикла; 
	res=Лев(res,СтрДлина(res)-1);
	res="{"+res+"}";
	Возврат res
КонецФункции
Функция ПолучитьРеквизиты(suid,abon_id)
	 params			= "model=Abonents&method1=api_1c_manager.api_1c_get_abonent_attr&arg1={"+Символ(34)+"abonent_id"+Символ(34)+":"+Символ(34)+Формат(abon_id,"ЧГ=0")+Символ(34)+"}";
	 ИмяФайла		= КаталогВременныхФайлов() + "\tmp_import_recvis.xml";

	 Реквизиты=ОтправитьRestЗапрос(ИмяФайла,params);
	 колич=Реквизиты.Количество();
	 результат=Новый Соответствие;
	 Для сч2=0 по колич-1 цикл
		  результат [Реквизиты[сч2].fields.attribute]=Реквизиты[сч2].fields.attribute_value;		 
	 КонецЦикла;
	 Возврат результат;

 КонецФункции
Функция ПолучитьУчетныеДанные(suid,abon_id)
	 params			= "model=Abonents&method1=api_1c_manager.api_1c_get_abonent_users&arg1={"+Символ(34)+"abonent_id"+Символ(34)+":"+Символ(34)+Формат(abon_id,"ЧГ=0")+Символ(34)+"}";
	 ИмяФайла		= КаталогВременныхФайлов() + "\tmp_import_users.xml";
	 data=ОтправитьRestЗапрос(ИмяФайла,params);
	 Возврат data;

 КонецФункции
Функция ПолучитьСчет(suid,abonent_id)
	 params			= "model=Abonents&method1=api_1c_manager.api_1c_get_account&arg1={"+Символ(34)+"abonent_id"+Символ(34)+":"+Символ(34)+Формат(abonent_id,"ЧГ=0")+Символ(34)+"}";
	 ИмяФайла		= КаталогВременныхФайлов() + "\tmp_import_account.xml";
	 data=ОтправитьRestЗапрос(ИмяФайла,params);
	 Возврат data[0];
КонецФункции
Функция ПолучитьКонтрагентов(suid,parent_id,sync1c)
	 params	= "model=Abonents&method1=api_1c_manager.api_1c_get_abonents";
	 args=Новый Соответствие;
	 args["parent_id"]=parent_id;
	 args["sync1c"]=sync1c;
	 params=params+"&arg1="+form_params_str(args);
	 ИмяФайла = КаталогВременныхФайлов() + "\tmp_import_contr.xml";
	 data=ОтправитьRestЗапрос(ИмяФайла,params);
	 Возврат data;
 КонецФункции
Функция ПолучитьКонтрагентаПоКоду(suid,code1c)
	 URL			= "model=Abonents&method1=objects.filter&arg1={"+Символ(34)+"code1c"+Символ(34)+":"+Символ(34)+Формат(code1c,"ЧГ=0")+Символ(34)+"}";//+"&hash_key="+Строка(suid)+"&format=json";
	 ИмяФайла		= КаталогВременныхФайлов() + "\tmp_import_contr.xml";
	 data= ОтправитьRestЗапрос(ИмяФайла,URL);
	 Контрагент=data.Получить("result").Получить("result");
	 Возврат Контрагент;
 КонецФункции
Функция ПолучитьОперациюПоКоду(suid,code1c)
	 params			= "model=FinanceOperations&method1=objects.filter&arg1={"+Символ(34)+"code1c"+Символ(34)+":"+Символ(34)+Формат(code1c,"ЧГ=0")+Символ(34)+"}";//+"&hash_key="+Строка(suid)+"&format=json";
	 params = params+"&fields1=["+Символ(34)+"op_id"+Символ(34);
	 params = params+"]";
	 ИмяФайла		= КаталогВременныхФайлов() + "\tmp_import_oper.xml";
	 data= ОтправитьRestЗапрос(ИмяФайла,params);
	 Контрагент=data.Получить("result").Получить("result");
	 Возврат Контрагент;
КонецФункции
 
Функция ОтправитьRestЗапрос(ИмяФайла, params)
	URL = "/system_api/?"+params+"&format=json&context=api_1c";
	//Сообщить("АдресСервера:" + АдресСервера + ":" + port);
	//Сообщить("URL:" + URL);
	URL = URL + "&psw=" + Строка(ИмяПользователя);
	Попытка
        HTTPСоединение = Новый HTTPСоединение(АдресСервера, port);

        HTTPЗапрос = Новый HTTPЗапрос(URL);

        HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);

        КодСостояния = HTTPОтвет.КодСостояния;

        responseText = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		
		Текст		= Новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(responseText);
		Текст.Записать(ИмяФайла);
		//сообщить(КодСостояния);
	Исключение
		msg = "Не удалось установить соединение с сервером :" + Символы.ПС + ИнформацияОбОшибке().Описание;
		ВызватьИсключение msg;
	КонецПопытки;
	
	Файлjson=Новый ЧтениеJSON();
	Файлjson.ОткрытьФайл(ИмяФайла, "utf-8");
	Попытка
		data=ПрочитатьJSON(Файлjson);
		Файлjson.Закрыть();
	Исключение
		Сообщить("Не опознанный результат:");
		Сообщить("Ошибка:"+ОписаниеОшибки());
		Сообщить("Биллинг вернул:"+Файлjson.Прочитать());
		
	КонецПопытки;
	Если ТипЗнч(data)=Тип("Соответствие") И data.Получить("error_text")<>Неопределено Тогда
		msg="Неудалось выполнить запрос: "+data.Получить("error_text");
		Сообщить(msg);
		ВызватьИсключение msg;
	КонецЕсли;
	Если ТипЗнч(data)=Тип("Массив") И data.Количество()>0 И data[0].Свойство("error_text") Тогда
		msg="Неудалось выполнить запрос: "+data[0].error_text;
		Сообщить(msg);
		ВызватьИсключение msg;
	КонецЕсли;
	Если ТипЗнч(data)=Тип("Структура") И data.Свойство("error_text") Тогда
		msg="Неудалось выполнить запрос: "+data.error_text;
		Сообщить(msg);
		ВызватьИсключение msg;
	КонецЕсли;

	Возврат data
КонецФункции

Функция ПолучитьОперации(suid,abonent_id,op_type,sdate,edate)
	 params			= "model=FinanceOperations&method1=api_1c_manager.api_1c_get_fin_opers_with_context";
	 args=Новый Соответствие;
	 args["abonent_id"]=abonent_id;
	 args["op_type"]=op_type;
	 args["sdate"]=sdate;
	 args["edate"]=edate;
     params=params+"&arg1="+form_params_str(args);
	 ИмяФайла		= КаталогВременныхФайлов() + "\tmp_import_fin.xml";
	 data=ОтправитьRestЗапрос(ИмяФайла,params);
	 Возврат data;

 КонецФункции
 Функция ПолучитьДеталиОперации(suid,op_id)
	 params			= "model=FinanceOperations&method1=api_1c_manager.api_1c_get_fin_detail";
	 args=Новый Соответствие;
	 args["op_id"]=op_id;
     params=params+"&arg1="+form_params_str(args);
	 ИмяФайла		= КаталогВременныхФайлов() + "\tmp_import_fin.xml";
	 data=ОтправитьRestЗапрос(ИмяФайла,params);
	 Возврат data;

 КонецФункции

 Функция ОтправитьФинОперацию(suid,params)
	 	ИмяФайла	= КаталогВременныхФайлов() + "\tmp_export_finoper_add.xml";
		URL	= "model=FinanceOperations&method1=api_1c_manager.api_1c_sync_fin_oper";
		Инфо = Новый СистемнаяИнформация;
		formed_params = URLEncode(form_params_str(params));
		URL = URL+"&arg1="+formed_params;
		ОтправитьRestЗапрос(ИмяФайла,URL);
КонецФункции

Функция ИзменитьДобавитьКонтакт(КонтактнаяИнформация,тип,вид,значение)
	значение = СтрЗаменить(значение,"NULL","");
	
	Если ЗначениеЗаполнено(значение) Тогда
		КонтактнаяИнформацияНайдено = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип,Вид",тип,вид));
		Если КонтактнаяИнформацияНайдено.Количество()=0 Тогда
			НоваяЗапись				= КонтактнаяИнформация.Добавить();
		Иначе
			НоваяЗапись				= КонтактнаяИнформацияНайдено[0];
		КонецЕсли;
		НоваяЗапись.Тип			= тип;
		НоваяЗапись.Вид			= вид;
		НоваяЗапись.Представление	= значение;
		Если тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			НоваяЗапись.АдресЭП = значение;
		ИначеЕсли тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			НоваяЗапись.НомерТелефона = значение;
		КонецЕсли
	КонецЕсли;
КонецФункции

Процедура ПрочитатьКонтрагентов(suid)
	счСтрок			= 1;
	parent_id=СтрЗаменить(Строка(ИдГруппы), Символы.НПП,"");
	массивОбьектов=ПолучитьКонтрагентов(suid,parent_id,0);	
	Стр = "";
	КоличествоЗаписей=массивОбьектов.Количество();
	Для Сч = 0 По КоличествоЗаписей-1 Цикл
		 РеквизитыОбъекта = массивОбьектов[Сч].fields;		 
		 abon_id=массивОбьектов[Сч].pk;      
		 account_id=РеквизитыОбъекта.account;
		 Реквизиты=ПолучитьРеквизиты(suid,abon_id);
		 Учетки=ПолучитьУчетныеДанные(suid,abon_id);
		 Счет=ПолучитьСчет(suid,abon_id);
		 login="";
		 ip="";
		 КоличУч=Учетки.Количество();
		 Для сч1=0 по КоличУч-1 цикл
			  login=login+Учетки[сч1].fields.login+";";
			  ip=ip+Учетки[сч1].fields.ip+";";
		  КонецЦикла;		  
		 	user_id		= abon_id;
		 	name		= РеквизитыОбъекта.name;
		 	full_name	= name;
		  inn			= Реквизиты.Получить(4);
		  kpp			= Реквизиты.Получить(5);
		 	code1c		= РеквизитыОбъекта.code1c;
		 	email		= РеквизитыОбъекта.email;
		 	ostatok		= Счет.fields.ostatok;
		 	debit		= Счет.fields.debit;
		 	credit		= Счет.fields.credit;
		  address_u	= Реквизиты.Получить(25);
		  address_f	= Реквизиты.Получить(26);
		  Если ЗначениеЗаполнено(СтрЗаменить(address_f,"NULL","")) Тогда
			  address_f = address_u;
	      КонецЕсли;
		  is_phys		= РеквизитыОбъекта.company;
		 	tel			= РеквизитыОбъекта.sms;
		 	contract_number	= РеквизитыОбъекта.contract_number;
		 	
			НайденныйКонтрагент	= Справочники.Контрагенты.ПустаяСсылка();
			
			Если (ЗначениеЗаполнено(code1c)) И НЕ ЗначениеЗаполнено(НайденныйКонтрагент) Тогда
				НайденныйКонтрагент	= Справочники.Контрагенты.НайтиПоКоду(code1c);
			КонецЕсли;
			
			Если (ЗначениеЗаполнено(inn)) И НЕ ЗначениеЗаполнено(НайденныйКонтрагент) Тогда
				НайденныйКонтрагент	= Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",inn);
			КонецЕсли;	
				
			Если ЗначениеЗаполнено(НайденныйКонтрагент) Тогда
				Контрагент	= НайденныйКонтрагент.ПолучитьОбъект();
			Иначе
				Контрагент	= Справочники.Контрагенты.СоздатьЭлемент();
			КонецЕсли;
			
			СтрокаКомментария	= "";
			СтрокаКомментария	= СтрокаКомментария + ?(login = "NULL",			"","login = " + Строка(login)+";");
			СтрокаКомментария	= СтрокаКомментария + ?(user_id = "NULL",		"","user_id = " + Строка(user_id)+";");
			СтрокаКомментария	= СтрокаКомментария + ?(ip = "NULL",			"","ip = " + Строка(ip)+";");
			
//			Контрагент.Наименование 	= name + " (" + user_id + ")";
			Контрагент.Наименование 	= name;
//			Контрагент.ОсновнойДоговорКонтрагента
			Контрагент.Комментарий		= СтрокаКомментария;
//			Контрагент.ГоловнойКонтрагент
			Инфо = Новый СистемнаяИнформация;
			Контрагент.ЮридическоеФизическоеЛицо		= ?(is_phys = 0, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
			Контрагент.ИНН				= СтрЗаменить(inn,"NULL","");
//			Контрагент.КодПоОКПО
			Контрагент.КПП				= СтрЗаменить(kpp,"NULL","");
			Контрагент.НаименованиеПолное	= full_name;
//			Контрагент.ОсновнойБанковскийСчет
//			Контрагент.ДокументУдостоверяющийЛичность
//			Контрагент.ОсновноеКонтактноеЛицо
			Попытка
				Контрагент.Записать();
			Исключение
				Сообщить("Не удалось создать контрагента: код(" + Строка(Контрагент.Код)+"),ИНН("+Контрагент.ИНН+"),Наименование("+Контрагент.Наименование+")");
				Если Не ЗначениеЗаполнено(Контрагент.Код) Тогда
					Сообщить("Пытаемся создать с кодом из биллинга");
					Контрагент.Код="B"+СтрЗаменить(abon_id,Символы.НПП,"");
					Контрагент.Записать();
				Иначе
					Продолжить;
				КонецЕсли;
			КонецПопытки;
			Контрагент.ГоловнойКонтрагент	= Контрагент.Ссылка;
			Контрагент.Записать();

			НайденныйДоговор	= Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("С покупателем",,,Контрагент.Ссылка);
			
			Если ЗначениеЗаполнено(НайденныйДоговор) Тогда
				ДоговорКонтрагента	= НайденныйДоговор.ПолучитьОбъект();
			Иначе
				ДоговорКонтрагента	= Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			КонецЕсли;
			
			ДоговорКонтрагента.Наименование		= "С покупателем";
			ДоговорКонтрагента.Владелец			= Контрагент.Ссылка;
			ДоговорКонтрагента.ВалютаВзаиморасчетов	= мВалютаРегламентированногоУчета;
//			ДоговорКонтрагента.Комментарий
			ДоговорКонтрагента.Организация		= Организация;
//			ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения
//			ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения
//			ДоговорКонтрагента.ТипЦен
			ДоговорКонтрагента.ВидДоговора		= Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
			ДоговорКонтрагента.УчетАгентскогоНДС		= Ложь;
//			ДоговорКонтрагента.ВидАгентскогоДоговора
			ДоговорКонтрагента.РасчетыВУсловныхЕдиницах	= Ложь;
			//ДоговорКонтрагента.РеализацияНаЭкспорт		= Ложь;
//			ДоговорКонтрагента.ВидВзаиморасчетов
//			ДоговорКонтрагента.Дата
			ДоговорКонтрагента.Номер					= contract_number;
//			ДоговорКонтрагента.СрокДействия
//			ДоговорКонтрагента.УстановленСрокОплаты
//			ДоговорКонтрагента.СрокОплаты
//			ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс
			ДоговорКонтрагента.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору	= Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы;
//			ДоговорКонтрагента.НалоговыйАгентПоОплате
//			ДоговорКонтрагента.ИспользуетсяПриОбменеДанными
			ДоговорКонтрагента.Записать();
			КонтактнаяИнформация=Контрагент.КонтактнаяИнформация;
			ИзменитьДобавитьКонтакт( КонтактнаяИнформация,Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, address_u);
            ИзменитьДобавитьКонтакт( КонтактнаяИнформация,Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, address_f);
			ИзменитьДобавитьКонтакт( КонтактнаяИнформация,Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, tel);
			ИзменитьДобавитьКонтакт( КонтактнаяИнформация,Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.EmailОрганизации, email);
						
			Контрагент.Записать();
			
			НоваяСтрока		= тСинхронизации.Добавить();
			НоваяСтрока.code_asr	= Строка(user_id);
			НоваяСтрока.code_1c		= Строка(Контрагент.Код);

			Если тСинхронизации.Количество() = КолЗапСинхр Тогда
				ПровестиСинхронизацию(suid,1);
			КонецЕсли;
			Сообщить("Создан контрагент с кодом: " + Строка(Контрагент.Код));
		 	
		 //КонецЕсли;
	КонецЦикла;
	ПровестиСинхронизацию(suid,1);
КонецПроцедуры
Процедура ПрочитатьПКО(suid)
	//URL			= АдресСервера+"/api.php?cmd=select&proc=API_FINOPER_LIST&arg1="+Строка(suid)+"&arg2="+Формат(ИдГруппы,"ЧГ=0")+"&arg3=2";
//	Сообщить(URL);

	//ИмяФайла		= КаталогВременныхФайлов() + "\tmp_import_finoper.xml";
	счСтрок			= 1;
//+SHDE
//	ИмяФайла_подтв	= КаталогВременныхФайлов() + "\tmp_import_finoper_sync.xml";
//-SHDE
	
	//xml_ОтправитьЗапрос(URL);
	//xml_ПрочитатьЗапрос(ИмяФайла);
	//
	//ФайлЗагрузки		= xml_ОткрытьФайл(ИмяФайла,счСтрок);
	СчитыватьДанные		= 1;
	КоличествоЗаписей 	= 0;

	//ЕстьОшибка	= xml_ПрочитатьЗаголовок(ФайлЗагрузки,счСтрок);	
	//Если ЕстьОшибка > 0 Тогда
	//	Возврат;
	//КонецЕсли;
	
	Стр = "";
//	Пока Найти(Стр,"<rows>")=0 Цикл
////		Стр = СокрЛП(ФайлЗагрузки.ReadLine());
//		Стр = СокрЛП(ФайлЗагрузки.ПолучитьСтроку(счСтрок));
//		счСтрок	= счСтрок + 1;
//	КонецЦикла;
	контрагенты=ПолучитьКонтрагентов(suid,ИдГруппы,1);
	КоличествоЗаписей = контрагенты.Количество();//Число(СтрЗаменить(СтрЗаменить(Стр,"<rows>",""),"</rows>",""));

	Для Сч = 0 По КоличествоЗаписей-1 Цикл
		 Операции=ПолучитьОперации(suid,контрагенты[сч].pk,2,НачДата,КонДата);
		 колОпер=Операции.Количество();
		 Для сч2=0 по колОпер-1 цикл
		    РеквизитыОбъекта = Операции[сч2];//xml_Прочитать(ФайлЗагрузки,счСтрок,"<row>","</row>");
		 //Если РеквизитыОбъекта <> 0 Тогда
			op_id		= Операции[сч2].op_id;
			op_type		= РеквизитыОбъекта.op_type_id;
			op_date		= РеквизитыОбъекта.op_date;
			op_summa	= РеквизитыОбъекта.op_summa;
			op_card_id	= РеквизитыОбъекта.op_card_id;
			pr_number	= РеквизитыОбъекта.number;
			balance_buh	= РеквизитыОбъекта.balance_buh;
			descr		= РеквизитыОбъекта.descr;
			end_user			= 1;//РеквизитыОбъекта.Получить("end_user");
			operator_pay_id		= РеквизитыОбъекта.operator_pay_id;
			operator_name		= РеквизитыОбъекта.operator_name;
			operator_result		= РеквизитыОбъекта.operator_result;
			operator_pay_id_str	= РеквизитыОбъекта.operator_pay_id_str;
			code1c				= РеквизитыОбъекта.code1c;
			users_code1c		= контрагенты[сч].fields.code1c;
			users_identify		= контрагенты[сч].fields.name;
			
			Если НЕ ЗначениеЗаполнено(code1c) Тогда
				Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС или СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					РасчетнаяСтавкаНДС = 0;
				Иначе
					РасчетнаяСтавкаНДС	= Число(Лев(СтавкаНДС,2)/100);
				КонецЕсли;	
				СтрокаКомментария	= "";
				СтрокаКомментария	= СтрокаКомментария + ?(op_card_id = "NULL",		"","op_card_id = " + Строка(op_card_id)+";");
				СтрокаКомментария	= СтрокаКомментария + ?(pr_number = "NULL",			"","namber = " + Строка(pr_number)+";");
				СтрокаКомментария	= СтрокаКомментария + ?(balance_buh = "NULL",		"","balance_buh = " + Строка(balance_buh)+";");
				СтрокаКомментария	= СтрокаКомментария + ?(operator_pay_id = "NULL",	"","operator_pay_id = " + Строка(operator_pay_id)+";");
				СтрокаКомментария	= СтрокаКомментария + ?(operator_name = "NULL",		"","operator_name = " + Строка(operator_name)+";");
				СтрокаКомментария	= СтрокаКомментария + ?(operator_result = "NULL",	"","operator_result = " + Строка(operator_result)+";");
				СтрокаКомментария	= СтрокаКомментария + ?(operator_pay_id_str = "NULL","","operator_pay_id_str = " + Строка(operator_pay_id_str)+";");

				Контрагент			= Справочники.Контрагенты.НайтиПоКоду(users_code1c);
				Если ЗначениеЗаполнено(Контрагент) Тогда
			
					Договор			= Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("С покупателем",,,Контрагент);
					Если Не ЗначениеЗаполнено(Договор) Тогда
						ДоговорКонтрагента		= Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
						ДоговорКонтрагента.Наименование		= "С покупателем";
						ДоговорКонтрагента.Владелец			= Контрагент;
						ДоговорКонтрагента.ВалютаВзаиморасчетов	= мВалютаРегламентированногоУчета;
//						ДоговорКонтрагента.Комментарий
						ДоговорКонтрагента.Организация		= Организация;
//						ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения
//						ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения
//						ДоговорКонтрагента.ТипЦен
						ДоговорКонтрагента.ВидДоговора		= Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
						ДоговорКонтрагента.УчетАгентскогоНДС		= Ложь;
//						ДоговорКонтрагента.ВидАгентскогоДоговора
						ДоговорКонтрагента.РасчетыВУсловныхЕдиницах	= Ложь;
						ДоговорКонтрагента.РеализацияНаЭкспорт		= Ложь;
//						ДоговорКонтрагента.ВидВзаиморасчетов
//						ДоговорКонтрагента.Дата
//						ДоговорКонтрагента.Номер
//						ДоговорКонтрагента.СрокДействия
//						ДоговорКонтрагента.УстановленСрокОплаты
//						ДоговорКонтрагента.СрокОплаты
//						ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс
						ДоговорКонтрагента.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору	= Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы;
//						ДоговорКонтрагента.НалоговыйАгентПоОплате
//						ДоговорКонтрагента.ИспользуетсяПриОбменеДанными
						ДоговорКонтрагента.Записать();
						Договор	= ДоговорКонтрагента.Ссылка;
					КонецЕсли;
				КонецЕсли;
				
//Заполнение шапки документа ПКО
				ПКО			= Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
				ПКО.Дата				= Сред(op_date,0,4)+Сред(op_date,6,2)+Сред(op_date,9,2); 
				ПКО.Организация			= Организация;
				ПКО.СчетКасса			= ПланыСчетов.Хозрасчетный.КассаОрганизации;
				ПКО.ВидОперации			= Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
				ПКО.Контрагент			= Контрагент;
				ПКО.ДоговорКонтрагента	= Договор;
				ПКО.ВалютаДокумента		= мВалютаРегламентированногоУчета;
				ПКО.СуммаДокумента		= Число(op_summa);
				ПКО.ПринятоОт			= users_identify;
				ПКО.Основание			= "Оплата за услуги за период " + descr;
//				ПКО.Приложение
//				ПКО.Ответственный
				ПКО.Комментарий			= СтрокаКомментария;
//				ПКО.ДокументОснование
				ПКО.СчетУчетаРасчетовСКонтрагентом	= СчетРасчетов;
//				ПКО.СубконтоКт1
//				ПКО.СубконтоКт2
//				ПКО.СубконтоКт3
				ПКО.СтатьяДвиженияДенежныхСредств	= СтатьяДДС;
				ПКО.СтавкаНДС						= СтавкаНДС;
//				ПКО.Содержание_УСН
//				ПКО.Графа4_УСН
//				ПКО.Графа5_УСН
//				ПКО.Графа6_УСН
//				ПКО.Графа7_УСН
//				ПКО.ДоходыЕНВД_УСН
//				ПКО.РасходыЕНВД_УСН
//				ПКО.НДС_УСН
//				ПКО.РучнаяНастройка_УСН
//				ПКО.ВыручкаСНТТ
//				ПКО.НомерЧекаККМ
				ПКО.РучнаяКорректировка	= Ложь;
//				ПКО.ПодразделениеКт

//Заполнение ТЧ РасшифровкаПлатежа документа ПКО
				НоваяСтрока	= ПКО.РасшифровкаПлатежа.Добавить();
				НоваяСтрока.ДоговорКонтрагента				= Договор;
//				НоваяСтрока.Сделка
				НоваяСтрока.КурсВзаиморасчетов				= 1;
				НоваяСтрока.СуммаПлатежа					= Число(op_summa);
				НоваяСтрока.КратностьВзаиморасчетов			= 1;
				НоваяСтрока.СуммаВзаиморасчетов				= Число(op_summa);
				НоваяСтрока.СтавкаНДС						= СтавкаНДС;
				НоваяСтрока.СуммаНДС						= Число(op_summa)*РасчетнаяСтавкаНДС;
				НоваяСтрока.СтатьяДвиженияДенежныхСредств	= СтатьяДДС;
				НоваяСтрока.СчетУчетаРасчетовСКонтрагентом	= СчетРасчетов;
				НоваяСтрока.СчетУчетаРасчетовПоАвансам		= СчетАвансов;
//				НоваяСтрока.СчетНаОплату
				НоваяСтрока.СпособПогашенияЗадолженности	= Перечисления.СпособыПогашенияЗадолженности.Автоматически;
				ПКО.Записать();
				   
//+SHDE
//				URL = АдресСервера+"/api.php?cmd=select&proc=API_FINOPER_SYNC&arg1="+Строка(suid)+
//						"&arg2="+Строка(op_id)+"&arg3="+Строка("H"+Строка(ДатаГод(ПКО.ДатаДок))+"_"+ПКО.НомерДок);
//				xml_ОтправитьЗапрос(URL);
//+Обработка результата запроса
//				xml_ПрочитатьЗапрос(ИмяФайла_подтв);
//				ФайлПодтв	= xml_ОткрытьФайл(ИмяФайла_подтв);
//				xml_ПрочитатьЗаголовок(ФайлПодтв);
//				xml_Закрыть(ФайлПодтв);
//-Обработка результата запроса

				НоваяСтрока		= тСинхронизации.Добавить();
				НоваяСтрока.code_asr	= Строка(op_id);
				НоваяСтрока.code_1c		= Строка(Формат(Год(ПКО.Дата),"ЧГ=0")+"_"+ПКО.Номер);

				Если тСинхронизации.Количество() = КолЗапСинхр Тогда
					ПровестиСинхронизацию(suid,2);
				КонецЕсли;
//-SHDE
				Сообщить("Создан приходный кассовый ордер с кодом: " + Строка(ПКО.Номер) + " от " + Строка(ПКО.Дата));
			КонецЕсли;
		 	
		//КонецЕсли;
		конеццикла;
	КонецЦикла;
	
//+SHDE
	ПровестиСинхронизацию(suid,2);
//-SHDE

	//xml_Закрыть(ФайлЗагрузки);
КонецПроцедуры
Процедура ПрочитатьАкт(suid,ТипОперации,ДопНаименование = "")
	счСтрок			= 1;
	СчитыватьДанные		= 1;
	КоличествоЗаписей 	= 0;
	Стр = "";
	//Получим контрагентов из биллига
	контрагенты=ПолучитьКонтрагентов(suid,ИдГруппы,1);
	КоличествоЗаписей = контрагенты.Количество();//Число(СтрЗаменить(СтрЗаменить(Стр,"<rows>",""),"</rows>",""));
	
	Для Сч = 0 По КоличествоЗаписей-1 Цикл
		//Получим все акты по абоненту в биллинге
		Операции=ПолучитьОперации(suid,контрагенты[сч].pk,ТипОперации,НачДата,КонДата);
		колОпер=Операции.Количество();
		Для сч2=0 по колОпер-1 цикл
			
			РеквизитыОбъекта = Операции[сч2];	 
			op_id		= Операции[сч2].op_id;
			op_type		= РеквизитыОбъекта.op_type_id;
			op_date		= РеквизитыОбъекта.op_date;
			op_summa	= РеквизитыОбъекта.op_summa;
			op_card_id	= РеквизитыОбъекта.op_card_id;
			pr_number	= РеквизитыОбъекта.number;
			balance_buh	= РеквизитыОбъекта.balance_buh;
			descr		= ДопНаименование + РеквизитыОбъекта.descr;
			end_user			= 1;
			operator_pay_id		= РеквизитыОбъекта.operator_pay_id;
			operator_name		= РеквизитыОбъекта.operator_name;
			operator_result		= РеквизитыОбъекта.operator_result;
			operator_pay_id_str	= РеквизитыОбъекта.operator_pay_id_str;
			code1c				= РеквизитыОбъекта.code1c;
			users_code1c		= контрагенты[сч].fields.code1c;
			users_identify		= контрагенты[сч].fields.name;
			//storno 				= РеквизитыОбъекта.storno;
			//Если документа нет в базе 1С
			Если Не ЗначениеЗаполнено(code1c) Тогда
				РасчетнаяСтавкаНДС	= Число(Лев(СтавкаНДС,2)/100);
				СтрокаКомментария	= "";
				СтрокаКомментария	= СтрокаКомментария + ?(op_card_id = "NULL",		"","op_card_id = " + Строка(op_card_id)+";");
				СтрокаКомментария	= СтрокаКомментария + ?(pr_number = "NULL",			"","namber = " + Строка(pr_number)+";");
				СтрокаКомментария	= СтрокаКомментария + ?(balance_buh = "NULL",		"","balance_buh = " + Строка(balance_buh)+";");
				СтрокаКомментария	= СтрокаКомментария + ?(operator_pay_id = "NULL",	"","operator_pay_id = " + Строка(operator_pay_id)+";");
				СтрокаКомментария	= СтрокаКомментария + ?(operator_name = "NULL",		"","operator_name = " + Строка(operator_name)+";");
				СтрокаКомментария	= СтрокаКомментария + ?(operator_result = "NULL",	"","operator_result = " + Строка(operator_result)+";");
				СтрокаКомментария	= СтрокаКомментария + ?(operator_pay_id_str = "NULL","","operator_pay_id_str = " + Строка(operator_pay_id_str)+";");
				//Ищем контрагента в 1С и если нету, создадим
				Контрагент			= Справочники.Контрагенты.НайтиПоКоду(users_code1c);
				Если ЗначениеЗаполнено(Контрагент) Тогда					
					Договор			= Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("С покупателем",,,Контрагент);
					Если Не ЗначениеЗаполнено(Договор) Тогда
						ДоговорКонтрагента		= Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
						ДоговорКонтрагента.Наименование		= "С покупателем";
						ДоговорКонтрагента.Владелец			= Контрагент;
						ДоговорКонтрагента.ВалютаВзаиморасчетов	= мВалютаРегламентированногоУчета;
						//						ДоговорКонтрагента.Комментарий
						ДоговорКонтрагента.Организация		= Организация;
						//						ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения
						//						ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения
						//						ДоговорКонтрагента.ТипЦен
						ДоговорКонтрагента.ВидДоговора		= Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
						ДоговорКонтрагента.УчетАгентскогоНДС		= Ложь;
						//						ДоговорКонтрагента.ВидАгентскогоДоговора
						ДоговорКонтрагента.РасчетыВУсловныхЕдиницах	= Ложь;
						ДоговорКонтрагента.РеализацияНаЭкспорт		= Ложь;
						//						ДоговорКонтрагента.ВидВзаиморасчетов
						//						ДоговорКонтрагента.Дата
						//						ДоговорКонтрагента.Номер
						//						ДоговорКонтрагента.СрокДействия
						//						ДоговорКонтрагента.УстановленСрокОплаты
						//						ДоговорКонтрагента.СрокОплаты
						//						ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс
						ДоговорКонтрагента.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору	= Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы;
						//						ДоговорКонтрагента.НалоговыйАгентПоОплате
						//						ДоговорКонтрагента.ИспользуетсяПриОбменеДанными
						ДоговорКонтрагента.Записать();
						Договор	= ДоговорКонтрагента.Ссылка;
					КонецЕсли;
				Иначе
					  Сообщить("Не удалось загрузить (не найден контрагент) Акт № в биллинге:"+pr_number);
					  Продолжить;
				КонецЕсли;

				
				//Заполнение шапки документа РТУ
				Акт								= Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				Акт.Дата				= Сред(op_date,0,4)+Сред(op_date,6,2)+Сред(op_date,9,2);//Сред(op_date,7,4)+Сред(op_date,4,2)+Сред(op_date,1,2);
				//				Акт.АдресДоставки
				//				Акт.БанковскийСчетОрганизации
				Акт.ВалютаДокумента		= мВалютаРегламентированногоУчета;
				Акт.ВидОперации			= Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
				//				Акт.Грузоотправитель
				//				Акт.Грузополучатель
				Акт.ДоговорКонтрагента	= Договор;
				Акт.Комментарий			= СтрокаКомментария;
				Акт.Контрагент			= Контрагент;
				Акт.КратностьВзаиморасчетов		= 1;
				Акт.КурсВзаиморасчетов	= 1;
				Акт.Организация			= Организация;
				//				Акт.Ответственный
				//				Акт.Склад
				//				Акт.СтатьяДоходовИРасходовПоТаре
				Акт.СуммаВключаетНДС	= Истина;
				Акт.СуммаДокумента		= Число(op_summa);
				//				Акт.СчетУчетаДоходовПоТаре
				//				Акт.СчетУчетаРасходовПоТаре
				Акт.СчетУчетаРасчетовПоАвансам		= СчетАвансов;
				//				Акт.СчетУчетаРасчетовПоТаре
				Акт.СчетУчетаРасчетовСКонтрагентом	= СчетРасчетов;
				//				Акт.ТипЦен
				//Акт.УчитыватьНДС		= Истина;
				Акт.РучнаяКорректировка	= Ложь;
				//				Акт.СчетНаОплатуПокупателю
				Акт.СпособЗачетаАвансов	= Перечисления.СпособыЗачетаАвансов.Автоматически;
				//Загрузим услуги из делатей операции, проверим наличие и если нет то добавим в 1С
				БиллингУслуги = РеквизитыОбъекта.act_services;
				колУслуг=БиллингУслуги.Количество();
				Для сч3=0 по колУслуг-1 цикл
					РеквизитыУслуги = БиллингУслуги[сч3];
					name		= РеквизитыУслуги.name;
					vv		= РеквизитыУслуги.v;
					price		= РеквизитыУслуги.price;
					Услуга		= Справочники.Номенклатура.НайтиПоКоду(name);
					Если Не ЗначениеЗаполнено(Услуга) Тогда
						Услуга		= Справочники.Номенклатура.НайтиПоНаименованию(name);
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(Услуга) Тогда
						УслугаОбъект	= Справочники.Номенклатура.СоздатьЭлемент();
						УслугаОбъект.Наименование				= name;
						УслугаОбъект.НаименованиеПолное			= name;
						//					УслугаОбъект.БазоваяЕдиницаИзмерения
						УслугаОбъект.СтавкаНДС					= СтавкаНДС;
						//					УслугаОбъект.Комментарий
						УслугаОбъект.Услуга						= Истина;
						//					УслугаОбъект.НоменклатурнаяГруппа
						//					УслугаОбъект.СтранаПроисхождения
						//					УслугаОбъект.НомерГТД
						//					УслугаОбъект.СтатьяЗатрат
						//					УслугаОбъект.ОсновнаяСпецификацияНоменклатуры
						УслугаОбъект.Записать();
						Услуга			= УслугаОбъект.Ссылка;
					КонецЕсли;
					//Заполнение ТЧ Услуги документа РТУ
					НоваяСтрока	= Акт.Услуги.Добавить();
					НоваяСтрока.Содержание		= name;
					НоваяСтрока.Количество		= vv;
					НоваяСтрока.Цена			= Число(price);
					НоваяСтрока.Сумма			= Число(price)*vv;
					НоваяСтрока.СтавкаНДС		= СтавкаНДС;
					НоваяСтрока.СуммаНДС		= Число(НоваяСтрока.Сумма)*РасчетнаяСтавкаНДС;
					НоваяСтрока.Номенклатура	= Услуга;
					НоваяСтрока.СчетУчетаНДСПоРеализации	= ПланыСчетов.Хозрасчетный.Продажи_НДС;
					НоваяСтрока.СчетДоходов		= ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
					НоваяСтрока.СчетРасходов	= ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
					//				НоваяСтрока.Субконто
				КонецЦикла;
				Акт.Записать();				
				НоваяСтрока		= тСинхронизации.Добавить();
				НоваяСтрока.code_asr	= Строка(op_id);
				НоваяСтрока.code_1c		= Строка(Формат(Год(Акт.Дата),"ЧГ=0")+"_"+Акт.Номер);
				
				Если тСинхронизации.Количество() = КолЗапСинхр Тогда
					ПровестиСинхронизацию(suid,3);
				КонецЕсли;
				Сообщить("Создан акт об оказании услуг с кодом: " + Строка(Акт.Номер) + " от " + Строка(Акт.Дата));
			КонецЕсли;
		конеццикла;	
	КонецЦикла;
	ПровестиСинхронизацию(suid,3);
КонецПроцедуры

//***********************************************************************************************************
Процедура ВыгрузитьПКО(suid)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПриходныйКассовыйОрдер.Контрагент.Код,
	               |	ПриходныйКассовыйОрдер.Дата,
	               |	ПриходныйКассовыйОрдер.СуммаДокумента,
	               |	ПриходныйКассовыйОрдер.Основание,
	               |	ПриходныйКассовыйОрдер.Номер
	               |ИЗ
	               |	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	               |ГДЕ
	               |	ПриходныйКассовыйОрдер.Дата МЕЖДУ &НачДата И &КонДата
	               |	И ПриходныйКассовыйОрдер.Проведен = ИСТИНА
	               |	И ПриходныйКассовыйОрдер.ВидОперации = &ВидОперации";
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("КонДата", КонДата);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
	ВыборкаПКО	= Запрос.Выполнить().Выбрать();
	Пока ВыборкаПКО.Следующий() Цикл
		params=Новый Соответствие;
		params["abon_code1c"]=ВыборкаПКО.КонтрагентКод;
		params["op_date"]=Формат(ВыборкаПКО.Дата,"ДФ=yyyy-MM-dd");
		params["op_summa"]=Формат(ВыборкаПКО.СуммаДокумента,"ЧГ=0");
		params["descr"]="Касса: " + СокрЛП(ВыборкаПКО.Основание);
		params["code1c"]=Формат(Год(ВыборкаПКО.Дата),"ЧГ=0") + "_" + ВыборкаПКО.Номер;
		params["op_type_id"]= 2;
		счСтрок		= 1;
		ОтправитьФинОперацию(suid,params);
		Сообщить("Выгружен приходный кассовый ордер с номером: " + Строка(ВыборкаПКО.Номер));
	КонецЦикла;
	
КонецПроцедуры
Процедура ВыгрузитьПДС(suid)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеНаРасчетныйСчет.Контрагент.Код,
	               |	ПоступлениеНаРасчетныйСчет.Дата,
	               |	ПоступлениеНаРасчетныйСчет.СуммаДокумента,
	               |	ПоступлениеНаРасчетныйСчет.НазначениеПлатежа,
	               |	ПоступлениеНаРасчетныйСчет.Номер
	               |ИЗ
	               |	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	               |ГДЕ
	               |	ПоступлениеНаРасчетныйСчет.Дата МЕЖДУ &НачДата И &КонДата
	               |	И ПоступлениеНаРасчетныйСчет.Проведен = ИСТИНА
	               |	И ПоступлениеНаРасчетныйСчет.ВидОперации = &ВидОперации";
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("КонДата", КонДата);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя);
	ВыборкаПДС	= Запрос.Выполнить().Выбрать();
	Пока ВыборкаПДС.Следующий() Цикл
		params=Новый Структура;
		params.Вставить("abon_code1c", ВыборкаПДС.КонтрагентКод);
		params.Вставить("code1c", Формат(Год(ВыборкаПДС.Дата),"ЧГ=0") + "_" + ВыборкаПДС.Номер);
		params.Вставить("op_date", Формат(ВыборкаПДС.Дата,"ДФ=yyyy-MM-dd"));
		params.Вставить("op_summa", Формат(ВыборкаПДС.СуммаДокумента,"ЧГ=0"));
		params.Вставить("descr", "Банк: " + СтрЗаменить(СокрЛП(ВыборкаПДС.НазначениеПлатежа), Символ(34), "\"+Символ(34)));
		params.Вставить("pr_number", Формат(Год(ВыборкаПДС.Дата),"ЧГ=0") + "_" + Строка(ВыборкаПДС.Номер) + "_" + Строка(1));
		params.Вставить("op_type_id", 2);
		ОтправитьФинОперацию(suid,params);
		счСтрок		= 1;
		Сообщить("Выгружено поступление денежных средств с номером: " + Строка(ВыборкаПДС.Номер) + ", строка:" + Строка(1));
	КонецЦикла;
	
КонецПроцедуры

//***********************************************************************************************************
Процедура КнопкаВыполнитьНажатие()
	suid=ИмяПользователя;
	Если suid <> "" Тогда
		//suid		= РеквизитыОбъекта.Получить("suid");
		//Сообщить("Авторизация на сервере прошла успешно");
		Сообщить("---------------------------Начало обмена данными---------------------------");

		Если Загружать1 = 1 Тогда
			Сообщить("---------------------Загрузка справочника контрагенты----------------------");
			ПрочитатьКонтрагентов(suid);
		КонецЕсли;
		Если Загружать2 = 1 Тогда
			Сообщить("--------------Загрузка приходных кассовых ордеров (op_id = 2)--------------");
			ПрочитатьПКО(suid);
		КонецЕсли;
		Если Загружать3 = 1 Тогда
			Сообщить("-----------------Загрузка актов оказания услуг (op_id = 1)-----------------");
			ПрочитатьАкт(suid,1,"Услуга доступа за период ");
		КонецЕсли;
		Если Загружать4 = 1 Тогда
			Сообщить("-----------------Загрузка агентский счетов оказания услуг (op_id = 11)-----------------");
			ПрочитатьАкт(suid,11,"Услуга доступа за период ");
		КонецЕсли;

		Если Выгружать1 = 1 Тогда
			Сообщить("-----------------Выгрузка приходных кассовых ордеров-----------------------");
			ВыгрузитьПКО(suid);
		КонецЕсли;
		Если Выгружать2 = 1 Тогда
			Сообщить("-----------------Выгрузка платежных поручений входящих-----------------------");
			ВыгрузитьПДС(suid);
		КонецЕсли;
		Сообщить("---------------------------Конец обмена данными----------------------------");
	Иначе
		suid		= 0;
		Сообщить("Ошибка авторизации на сервере");
	КонецЕсли;

	//xml_Закрыть(ФайлЗагрузки);
КонецПроцедуры  
